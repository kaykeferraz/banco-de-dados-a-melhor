exercicio 1
DELIMITER //
CREATE PROCEDURE sp_ListarAutores()
BEGIN
    SELECT * FROM Autor;
END //
DELIMITER ;
CALL sp_ListarAutores();

exercicio 2
CREATE PROCEDURE sp_LivrosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
    SELECT Livro.Titulo, Autor.Nome, Autor.Sobrenome
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    INNER JOIN Autor_Livro ON Livro.Livro_ID = Autor_Livro.Livro_ID
    INNER JOIN Autor ON Autor_Livro.Autor_ID = Autor.Autor_ID
    WHERE Categoria.Nome = categoriaNome;
END //
DELIMITER ;

-- Exemplo 1: Listar livros da categoria "Romance"
CALL sp_LivrosPorCategoria('Romance');

-- Exemplo 2: Listar livros da categoria "Ciência"
CALL sp_LivrosPorCategoria('Ciência');

exercicio 3
DELIMITER //
CREATE PROCEDURE sp_ContarLivrosPorCategoria(IN categoriaNome VARCHAR(100), OUT totalLivros INT)
BEGIN
    SELECT COUNT(*) INTO totalLivros
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoriaNome;
END //
DELIMITER ;
-- Declare uma variável para armazenar o resultado
DECLARE @resultado INT;

-- Chame a stored procedure para contar livros na categoria "Romance"
CALL sp_ContarLivrosPorCategoria('Romance', @resultado);

-- O resultado estará armazenado em @resultado
-- Você pode imprimi-lo ou usá-lo conforme necessário
SELECT @resultado;


-- Exemplo 3: Listar livros da categoria "Ficção Científica"
CALL sp_LivrosPorCategoria('Ficção Científica');

exercicio 4
DELIMITER //

CREATE PROCEDURE sp_VerificarLivrosCategoria(IN categoriaNome VARCHAR(100), OUT possuiLivros BOOLEAN)
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoriaNome;
    IF total > 0 THEN
        SET possuiLivros = TRUE;
    ELSE
        SET possuiLivros = FALSE;
    END IF;
END //
DELIMITER ;

exercicio 5
DELIMITER //
CREATE PROCEDURE sp_LivrosAteAno(IN anoPublicacao INT)
BEGIN
    SELECT Livro.Titulo, Livro.Ano_Publicacao
    FROM Livro
    WHERE Livro.Ano_Publicacao <= anoPublicacao;
END //
DELIMITER ;
CALL sp_LivrosAteAno(2010);
CALL sp_LivrosAteAno(2015);

exercicio 6
CREATE PROCEDURE sp_TitulosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
    SELECT Livro.Titulo
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoriaNome;
END //
DELIMITER ;
CALL sp_TitulosPorCategoria('Romance');
CALL sp_TitulosPorCategoria('Ciência');

exercicio 7
DELIMITER //
CREATE PROCEDURE sp_AdicionarLivro(IN tituloLivro VARCHAR(255), IN editoraID INT, IN anoPublicacao INT, IN numeroPaginas INT, IN categoriaID INT, OUT mensagem VARCHAR(255))
BEGIN
    DECLARE livroExiste INT;
    SELECT COUNT(*) INTO livroExiste
    FROM Livro
    WHERE Titulo = tituloLivro;
    IF livroExiste > 0 THEN
        SET mensagem = 'Erro: O livro com o título já existe.';
    ELSE
        INSERT INTO Livro (Titulo, Editora_ID, Ano_Publicacao, Numero_Paginas, Categoria_ID)
        VALUES (tituloLivro, editoraID, anoPublicacao, numeroPaginas, categoriaID);
        SET mensagem = 'Livro adicionado com sucesso.';
    END IF;
END //
DELIMITER ;
DECLARE @mensagem VARCHAR(255);
CALL sp_AdicionarLivro('Novo Livro', 1, 2022, 300, 2, @mensagem);
SELECT @mensagem;

exercicio 8
DELIMITER //
CREATE PROCEDURE sp_AutorMaisAntigo(OUT nomeAutorMaisAntigo VARCHAR(255))
BEGIN
    SELECT CONCAT(Nome, ' ', Sobrenome) INTO nomeAutorMaisAntigo
    FROM Autor
    WHERE Data_Nascimento = (SELECT MIN(Data_Nascimento) FROM Autor);
END //
DELIMITER ;
DECLARE @nomeAutorMaisAntigo VARCHAR(255);
CALL sp_AutorMaisAntigo(@nomeAutorMaisAntigo);
SELECT @nomeAutorMaisAntigo;

exercicio 9
DELIMITER //
CREATE PROCEDURE sp_TitulosPorCategoria(IN categoriaNome VARCHAR(100))
BEGIN
    SELECT Livro.Titulo
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoriaNome;
END //
DELIMITER ;

exercicio 10
DELIMITER //
CREATE PROCEDURE sp_LivrosESeusAutores()
BEGIN
    SELECT Livro.Titulo, CONCAT(Autor.Nome, ' ', Autor.Sobrenome) AS 'Nome do Autor'
    FROM Livro
    INNER JOIN Autor_Livro ON Livro.Livro_ID = Autor_Livro.Livro_ID
    INNER JOIN Autor ON Autor_Livro.Autor_ID = Autor.Autor_ID;
END //
DELIMITER ;
CALL sp_LivrosESeusAutores();
